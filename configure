#!/bin/bash

# This script was mostly pilfered from Rblpapi. All credit goes 
# to Dirk Eddelbuettel and Jeroen Ooms. See 
# https://github.com/Rblp/Rblpapi/blob/master/configure

# helper function for downloads
download() {
    url=${1}
    file=${2}
    libcurl=$(${R_HOME}/bin/Rscript -e 'cat(capabilities()[["libcurl"]])')
    # when we have libcurl in R, use it -- else fall back to curl
    if [ ${libcurl} == "TRUE" ]; then
        if [ ${file} == "" ]; then        
            file=$(basename ${url})
        fi
        ${R_HOME}/bin/Rscript -e "download.file(\"${url}\", \"${file}\", quiet=TRUE, method='libcurl')"
    else
        curl -s -k -L -O ${url}
    fi
}

sysname=$(${R_HOME}/bin/Rscript -e 'cat(Sys.info()["sysname"])')
if [ ${sysname} == "Linux" ]; then
    platform="linux"
elif [ ${sysname} == "Darwin" ]; then
    platform="osx"
else
    echo "... ERROR: Unsupported platform: $sysname"
    exit -1
fi

if [ ! -z ${PETSC_DIR} ] && [ -e ${PETSC_DIR} ]; then

    if [ ! -z ${DOWNLOAD_PETSC_BINARIES} ] && [ ! ${DOWNLOAD_PETSC_BINARIES} == "0" ]; then

        echo "... WARNING: PETSC_DIR is set and DOWNLOAD_PETSC_BINARIES=1."
        echo "............ No binaries will be downloaded. PETSC_DIR will be used instead."

        DOWNLOAD_PETSC_BINARIES="0"

    fi

fi

# Check if DOWNLOAD_PETSC_BINARIES is set to something other than 0
# If so, download the binaries.
if [ ! -z ${DOWNLOAD_PETSC_BINARIES} ] && [ ! ${DOWNLOAD_PETSC_BINARIES} == "0" ]; then
    
    echo "... Downloading PETSc binaries."
    
    # make a temporary directory with a lib folder and download the libaries
    mkdir petsc_temp && mkdir petsc_temp/lib
    cd petsc_temp/lib

    if [ ${platform} == "linux" ]; then
        download "https://github.com/jtilly/taoR/blob/petsc-3.6.3/libpetsc.so.3.6.3?raw=true" "libpetsc.so.3.6.3"
    fi

    if [ ${platform} == "osx" ]; then
        download "https://github.com/jtilly/taoR/raw/petsc-3.6.3/libpetsc.3.6.3.dylib?raw=true" "libpetsc.3.6.3.dylib"
    fi

    cd ../..

    # set PETSC_DIR to point to the temporary folder
    PETSC_DIR="petsc_temp"
fi

# Check if PETSC_DIR is set, and the libraries exist. If so copy them over.
PETSC="0"

if [ ! -z ${PETSC_DIR} ]; then

    # Assemble path to petsc libraries based on PETSC_DIR and PETSC_ARCH
    if [ ! -z ${PETSC_ARCH} ] && [ ! ${PETSC_ARCH} == "" ]; then
        PETSC_LIB=${PETSC_DIR}/${PETSC_ARCH}/lib
    else
        PETSC_LIB=${PETSC_DIR}/lib
    fi
    
    if [ ${platform} == "linux" ]; then

        echo "... Looking for libraries in ${PETSC_LIB}."

        if [ -e ${PETSC_LIB}/libpetsc.so.3.6.3 ]; then
            echo "... Found libpetsc.so.3.6.3."
            PETSC="1"
            cp -L ${PETSC_LIB}/libpetsc.so.3.6.3 inst/bin/libpetsc.so.3.6
			cd inst/bin 
			ln -s libpetsc.so.3.6 libpetsc.so.3.6.3
			ln -s libpetsc.so.3.6 libpetsc.so
			cd ../..
        elif [ -e ${PETSC_LIB}/libpetsc.so ]; then
            echo "... Found libpetsc.so."
            PETSC="1"
            cp -L ${PETSC_LIB}/libpetsc.so inst/bin/libpetsc.so.3.6.3
            cd inst/bin 
            ln -s libpetsc.so.3.6.3 libpetsc.so.3.6
            ln -s libpetsc.so.3.6.3 libpetsc.so
            cd ../..
        else 
            echo "... NOTE: Could not find libpetsc.so.3.6.3 or libpetsc.so."
        fi

    fi

    if [ ${platform} == "osx" ]; then

        echo "... Looking for libraries in ${PETSC_LIB}."

        if [ -e ${PETSC_LIB}/libpetsc.3.6.3.dylib ]; then
            echo "... Found libpetsc.3.6.3.dylib."
            PETSC="1"
            cp -L ${PETSC_LIB}/libpetsc.3.6.3.dylib inst/bin/
			cd inst/bin 
			ln -s libpetsc.3.6.3.dylib libpetsc.3.6.dylib
			ln -s libpetsc.3.6.3.dylib libpetsc.dylib
			cd ../..
        elif [ -e ${PETSC_LIB}/libpetsc.dylib ]; then
            echo "... Found libpetsc.dylib."
            PETSC="1"
            cp -L ${PETSC_LIB}/libpetsc.dylib inst/bin/libpetsc.3.6.3.dylib
            cd inst/bin 
            ln -s libpetsc.3.6.3.dylib libpetsc.3.6.dylib
            ln -s libpetsc.3.6.3.dylib libpetsc.dylib
            cd ../..
        else 
            echo "... NOTE: Could not find libpetsc.3.6.3.dylib or libpetsc.dylib in"
            echo "....${PETSC_LIB}."
        fi

    fi

    if [ ! -z ${DOWNLOAD_PETSC_BINARIES} ] && [ ! ${DOWNLOAD_PETSC_BINARIES} == "0" ]; then
        rm -rf "petsc_temp"
    fi

fi

if [ ${PETSC} == "0" ]; then

    # if we can't find libpetsc, create the binaries and store them in /inst/bin
    echo "... Could not find a valid installation of PETSc libraries."
    echo "... Downloading and installing PETSc from source."
    echo "... This may take several minutes."
    cd inst
    
    download http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-3.6.3.tar.gz
    
    if [ ! -e "petsc-lite-3.6.3.tar.gz" ]; then
        echo "... ERROR: Download failed"
        exit -1
    fi
    
    echo "... Download completed"
    tar xvf petsc-lite-3.6.3.tar.gz && rm petsc-lite-3.6.3.tar.gz && cd petsc-3.6.3
    
    # define PETSC_ARCH and export it so that ./configure can find it
    export PETSC_ARCH=arch-petscR

    # set PETSC_DIR to the current folder
    export PETSC_DIR=$(${R_HOME}/bin/Rscript -e 'cat(getwd())')

    # get compilers from R
    CC=$(R CMD config CC)
    CXX=$(R CMD config CXX)
    FC=$(R CMD config FC)

    # configure
    if [ ${platform} == "linux" ]; then
        ./configure --with-cc=${CC} --with-cxx=${CXX} --with-fc=${FC} --download-fblaslapack --with-debugging=0 --with-mpi=0 --with-x=0
    else 
        # to avoid issues on osx, install without fortran
        ./configure --with-cc=${CC} --with-cxx=${CXX} --with-fc=0 --download-f2cblaslapack --with-debugging=0 --with-mpi=0 --with-x=0
    fi

    echo "... PETSc configure step completed"
    
    make PETSC_DIR=${PETSC_DIR} PETSC_ARCH=${PETSC_ARCH} all
    echo "... PETSc make step completed"

    # check if the binaries exist
    if [ ! -e ${PETSC_ARCH}/lib/libpetsc.so ] && [ ! -e ${PETSC_ARCH}/lib/libpetsc.dylib ]; then
        echo "... ERROR: PETSc build failed. Please compile PETSc manually."
        exit -1
    fi

    # move the binaries to ../bin
    if [ ${platform} == "osx" ]; then
        cp -L ${PETSC_ARCH}/lib/libpetsc.3.6.3.dylib ../bin/libpetsc.3.6.3.dylib
        cd ../bin 
        ln -s libpetsc.3.6.3.dylib libpetsc.3.6.dylib
        ln -s libpetsc.3.6.3.dylib libpetsc.dylib
        cd ..
    fi
    
    if [ ${platform} == "linux" ]; then
        cp -L ${PETSC_ARCH}/lib/libpetsc.so.3.6.3 ../bin/libpetsc.so.3.6
        cd ../bin 
        ln -s libpetsc.so.3.6 libpetsc.so.3.6.3
        ln -s libpetsc.so.3.6 libpetsc.so
        cd ..
    fi
    
    rm -rf petsc-3.6.3
    cd ..

    echo "... PETSc installation completed."

fi

# store absolute path to /bin in rpath
rpath=$(${R_HOME}/bin/Rscript -e 'cat(file.path(.libPaths()[1], "taoR", "bin"))')


# set linker for Mac OS
if [ ${platform} == "osx" ]; then
    linker=$(otool -L inst/bin/libpetsc.3.6.3.dylib | sed -n 2p | sed 's/[[:space:]]//g' | sed 's/(.*//')
fi


# create Makevars
sed -e"s|@rpath@|"${rpath}"|" -e"s|@linker@|"${linker}"|" -e"s|@platform@|"${platform}"|" src/Makevars.in > src/Makevars

exit 0
